diff --git a/fs/timerfd.c b/fs/timerfd.c
index 1327a02..bf9eff4 100644
--- a/fs/timerfd.c
+++ b/fs/timerfd.c
@@ -237,6 +237,12 @@ static unsigned int timerfd_poll(struct file *file, poll_table *wait)
 	spin_lock_irqsave(&ctx->wqh.lock, flags);
 	if (ctx->ticks)
 		events |= POLLIN;
+	if (ctx->expired && isalarm(ctx)) {
+		pr_info("[oem]%s:comm:%s pid=%d exp:%llu\n",
+			__func__, current->comm, current->pid,
+			ktime_to_ms(ctx->t.alarm.node.expires));
+	}
+
 	spin_unlock_irqrestore(&ctx->wqh.lock, flags);
 
 	return events;
diff --git a/kernel/time/alarmtimer.c b/kernel/time/alarmtimer.c
index 40825f4..d75d293 100644
--- a/kernel/time/alarmtimer.c
+++ b/kernel/time/alarmtimer.c
@@ -56,6 +56,7 @@ static struct wakeup_source *ws;
 /* rtc timer and device for setting alarm wakeups at suspend */
 static struct rtc_timer		rtctimer;
 static struct rtc_device	*rtcdev;
+static int alarm_debug = 0;
 static DEFINE_SPINLOCK(rtcdev_lock);
 static struct mutex power_on_alarm_lock;
 static struct alarm init_alarm;
@@ -272,6 +273,8 @@ static void alarmtimer_enqueue(struct alarm_base *base, struct alarm *alarm)
 	if (alarm->state & ALARMTIMER_STATE_ENQUEUED)
 		timerqueue_del(&base->timerqueue, &alarm->node);
 
+	pr_info("[oem][alarm]%s:comm:%s pid:%d exp:%llu func:%pf\n", __func__,
+		current->comm, current->pid, ktime_to_ms(alarm->node.expires), alarm->function);
 	timerqueue_add(&base->timerqueue, &alarm->node);
 	alarm->state |= ALARMTIMER_STATE_ENQUEUED;
 }
@@ -316,6 +319,12 @@ static enum hrtimer_restart alarmtimer_fired(struct hrtimer *timer)
 	alarmtimer_dequeue(base, alarm);
 	spin_unlock_irqrestore(&base->lock, flags);
 
+	if(alarm_debug & 0x1) {
+		pr_info("[oem][alarm]%s:type=%d,func=%pf,exp=%llu\n", __func__,
+			alarm->type, alarm->function, ktime_to_ms(alarm->node.expires));
+		alarm_debug &= 0xFE;
+	}
+
 	if (alarm->function)
 		restart = alarm->function(alarm, base->gettime());
 
@@ -358,6 +367,7 @@ static int alarmtimer_suspend(struct device *dev)
 	struct rtc_device *rtc;
 	int i;
 	int ret = 0;
+	struct alarm* min_timer = NULL;
 
 	spin_lock_irqsave(&freezer_delta_lock, flags);
 	min = freezer_delta;
@@ -381,12 +391,21 @@ static int alarmtimer_suspend(struct device *dev)
 		if (!next)
 			continue;
 		delta = ktime_sub(next->expires, base->gettime());
-		if (!min.tv64 || (delta.tv64 < min.tv64))
+		if (!min.tv64 || (delta.tv64 < min.tv64)) {
+			min_timer = container_of(next, struct alarm, node);
 			min = delta;
+		}
 	}
 	if (min.tv64 == 0)
 		return 0;
 
+	if (min_timer) {
+		pr_info("[oem][alarm]%s:[%p]type=%d,func=%pf,exp=%llu\n",
+		__func__, min_timer, min_timer->type, min_timer->function, ktime_to_ms(min_timer->node.expires));
+		min_timer = NULL;
+	}
+	alarm_debug = 0x1;
+
 	if (ktime_to_ns(min) < 2 * NSEC_PER_SEC) {
 		__pm_wakeup_event(ws, 2 * MSEC_PER_SEC);
 		return -EBUSY;
